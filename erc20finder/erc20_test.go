package main

import (
	"fmt"
	"regexp"
	"testing"
)

func TestAddContract(t *testing.T) {
	s := `
<div class="tab-content" style="padding: 1px 0;">
<div class="tab-pane fade in active" id="transactions">
<div class="panel panel-info">
<div class="panel-body table-responsive">
&nbsp;<i class='fa fa-sort-amount-desc' rel='tooltip' data-placement='bottom' title='Oldest First'></i>&nbsp;Latest 1 txn
<br /><br />
<table class="table">
<tr>
<th>TxHash
</th>
<th class="hidden-sm">Block
 </th>
<th>
<span title="UTC time">Age</span>
</th>
<th>From
</th>
`
	reg := regexp.MustCompile(`Latest (\d+) txn`)
	fmt.Printf("%q\n", reg.FindStringSubmatch(s))
}

func TestCode(t *testing.T) {
	s := `
0131: PUSH1 0x20
000133: ADD
000134: SWAP2
000135: POP
000136: POP
000137: PUSH1 0x40
000139: MLOAD
000140: DUP1
000141: SWAP2
000142: SUB
000143: SWAP1
000144: RETURN
000145: JUMPDEST
000146: PUSH1 0x00
000148: DUP1
000149: PUSH1 0x00
000151: DUP1
000152: PUSH1 0x00
000154: DUP1
000155: PUSH2 0x7777
000158: SWAP5
000159: POP
000160: DUP5
000161: PUSH20 0xffffffffffffffffffffffffffffffffffffffff
000182: AND
000183: PUSH4 0xbd85b039
000188: PUSH1 0x33
000190: PUSH1 0x40
000192: MLOAD
000193: DUP3
000194: PUSH4 0xffffffff
000199: AND
000200: PUSH29 0x0100000000000000000000000000000000000000000000000000000000
000230: MUL
000231: DUP2
000232: MSTORE
000233: PUSH1 0x04
000235: ADD
000236: DUP1
000237: DUP3
000238: DUP2
000239: MSTORE
000240: PUSH1 0x20
000242: ADD
000243: SWAP2
000244: POP
000245: POP
000246: PUSH1 0x20
000248: PUSH1 0x40
000250: MLOAD
000251: DUP1
000252: DUP4
000253: SUB
000254: DUP2
000255: PUSH1 0x00
000257: DUP8
000258: DUP1
000259: EXTCODESIZE
000260: ISZERO
000261: ISZERO
000262: PUSH2 0x00f0
000265: JUMPI
000266: PUSH1 0x00
000268: DUP1
000269: REVERT
000270: JUMPDEST
000271: GAS
000272: CALL
000273: ISZERO
000274: ISZERO
000275: PUSH2 0x00fd
000278: JUMPI
000279: PUSH1 0x00
000281: DUP1
000282: REVERT
000283: JUMPDEST
000284: POP
000285: POP
000286: POP
000287: PUSH1 0x40
000289: MLOAD
000290: DUP1
000291: MLOAD
000292: SWAP1
000293: POP
000294: POP
000295: PUSH1 0x11
000297: PUSH1 0x01
000299: MUL
000300: SWAP4
000301: POP
000302: PUSH1 0x22
000304: SWAP3
000305: POP
000306: PUSH1 0x33
000308: PUSH1 0x01
000310: MUL
000311: SWAP2
000312: POP
000313: PUSH1 0x44
000315: PUSH1 0x01
000317: MUL
000318: SWAP1
000319: POP
000320: PUSH1 0x01
000322: DUP5
000323: DUP5
000324: DUP5
000325: DUP5
000326: PUSH1 0x40
000328: MLOAD
000329: PUSH1 0x00
000331: DUP2
000332: MSTORE
000333: PUSH1 0x20
000335: ADD
000336: PUSH1 0x40
000338: MSTORE
000339: PUSH1 0x40
000341: MLOAD
000317: MUL
000318: SWAP1
000319: POP
000320: PUSH1 0x01
000322: DUP5
000323: DUP5
000324: DUP5
000325: DUP53
000326: PUSH1 0x40
000328: MLOAD
000342: DUP1
000343: DUP6
`
	reg := regexp.MustCompile(`(?sm:PUSH1 0x01\n\d+: DUP\d\n\d+: DUP\d\n\d+: DUP\d\n\d+: DUP\d\n\d+: PUSH1 0x40\n\d+: MLOAD)`)
	fmt.Printf("%q\n", reg.FindAllString(s, -1))
}
